#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <string.h>
#define INFINITY          INT_MAX
#define MAX_VERTEX_NUM    20

//STRUCT DEFINITION
//typedef enum {DG=1, DN, UNG, UDN} GraphKind;

typedef struct ArcCell{
    int   adj;
    char *info;
}ArcCell, AdjMatrix[MAX_VERTEX_NUM][MAX_VERTEX_NUM];

typedef struct{
    char*      vexs[MAX_VERTEX_NUM];
    AdjMatrix  arcs;
    int        vexnum, arcnum;
    char       kind[20];
}MGraph;

typedef struct{
     char adjvex[30];       //vertex affiliated to the U set
     int lowcost;        //weight on this arc
  }Aid;//ASSISTANT ARRAY

//FUNCTION PROTOTYPE
//prototypes are typed here
//->


int main()
{
    printf("------------Minimum Cost Spanning Tree------------\n");
    printf("Tell me the kind of graph you want to create:\n");
    printf("DG   (1)\nDN   (2)\nUDG  (3)\nUDN  (4)\n");
    printf("(ONLY UDN is available for now!)\n");
    printf("Enter your choice number here: ");

    MGraph *G = (MGraph *)malloc(sizeof(MGraph));
    CreateGraph(G);

    printf("Enter the starting point: ");
    char start[30];
    scanf("%s",start);

    MiniSpanTree_PRIM(G,start);

    return 0;
}

int CreateGraph(MGraph *G){
    there:
    scanf("%s",G->kind);

    if(!strcmp(G->kind,"4"))
        CreateUDN(G);
    else
    {
        printf("*Graph type not supported!*\nYour choice must be in the list above.\n");
        printf("Enter your choice number here: ");
        goto there;
    }
}

// createUDN
int CreateUDN(MGraph *G){
    int i,j,k;
    char info = 'n';

    printf("How many vertices are in your Graph?\n");
    scanf("%d",&G->vexnum);
    printf("How many arcs are in your Graph?\n");
    scanf("%d",&G->arcnum);
    printf("Is there any extra info of your arcs?(y/n)\n");
    getchar();
    scanf("%c",&info);

    printf("Please enter each vertex name in order(using space as divider):\n");
    char temp[30];

    for(i=0; i<G->vexnum; i++)
    {
        scanf("%s", temp);
        G->vexs[i] = (char*)malloc(sizeof(temp));
        strcpy(G->vexs[i], temp);
    }
//AdjMatrix Initialization
    for(i=0; i<G->vexnum; i++)
        for(j=0; j<G->vexnum; j++){
            G->arcs[i][j].adj = INFINITY;
            G->arcs[i][j].info = NULL;
        }
// ENTER GRAPH INFORMATION AND CREATE ITS ADJACENT MATRIX
    printf("Please enter the information of your arcs:\n");

    if(!strcmp(G->kind,"4"))
        printf("(FORMAT: \"vertex1 vertex2 weight\")\n");

    for(k=0; k<G->arcnum; k++){
        char vertex1[30], vertex2[30];
        int weight;
        scanf("%s %s %d", &vertex1, &vertex2, &weight);

        i = LocateVex(G, vertex1);
        j = LocateVex(G, vertex2);
        G->arcs[i][j].adj = weight;
        if(info=='y')
        {
            printf("Please enter the info about this arc:\n");
            scanf("%s", G->arcs[i][j].info);
        }
        G->arcs[j][i] = G->arcs[i][j];
    }
    return 1;
}

int LocateVex(MGraph *G, char *u){
    int i;
    for(i=0; i<G->vexnum; i++){
        if( !strcmp(G->vexs[i], u) )
            return i;
      }
    return -1;
    }
// createUDN

// MST
void MiniSpanTree_PRIM(MGraph *G,  char *u){
    Aid closedge[MAX_VERTEX_NUM];
    int k = LocateVex(G, u), i, j, m;
    //closedge initialization
    for(j=0; j<G->vexnum; j++)
        if(j!=k){
            strcpy(closedge[j].adjvex, u);
            closedge[j].lowcost=G->arcs[k][j].adj;
        }
    closedge[k].lowcost = 0;


    printf("\nArcs on your MST should be: \n");
    for(i=1; i<G->vexnum; i++){
        m = minimum(closedge, G->vexnum, k);
        printf("(%s %s)\n",closedge[m].adjvex, G->vexs[m]);
        closedge[m].lowcost = 0;
        for(j=0; j<G->vexnum; j++)
            if(G->arcs[m][j].adj < closedge[j].lowcost){
                strcpy(closedge[j].adjvex,G->vexs[m]);
                closedge[j].lowcost=G->arcs[m][j].adj;
            }
    }
}//MST

int minimum(Aid* a, int n, int k){
    int i = 0,min=10000,flag=0;
    for(i=0; i<n; i++)
    {
        if(i==k) continue;
        if(a[i].lowcost<min&&a[i].lowcost!=0)
        {
            min=a[i].lowcost;
            flag=i;
        }
    }
    return flag;
}


// TEST SAMPLE
//1 2 6
//1 3 1
//1 4 5
//2 3 5
//2 5 3
//3 4 5
//3 5 6
//3 6 4
//4 6 2
//5 6 6

